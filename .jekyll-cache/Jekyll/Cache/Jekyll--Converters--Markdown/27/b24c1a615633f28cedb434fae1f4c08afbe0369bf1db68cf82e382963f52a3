I"¶0<p>I wanted to take a few notes about my SpiderMonkey debugging and code review setup so that this can be a reference for the future me :). This short post will be about that only.</p>

<h1 id="code-review">Code Review</h1>

<p>My favorite editor is <a href="https://atom.io">Atom</a> and I use the <a href="https://github.com/MaskRay/ccls">ccls</a> language-server to go through the source code. Some atom packages I use -</p>
<ul>
  <li><a href="https://github.com/isundaylee/atom-ide-ccls">atom-ide-ccls</a>: language-client for <code class="language-plaintext highlighter-rouge">ccls</code></li>
  <li><a href="https://atom.io/packages/cursor-history">cursor-history</a>: To easily navigate back to the original position after looking up a (say) function definition.</li>
  <li><a href="https://atom.io/packages/hyperclick">hyperclick</a>: For jumping to definitions</li>
</ul>

<p>I use <a href="https://github.com/rizsotto/Bear">bear</a> to generate the compilation database for ccls. Thus doing a <code class="language-plaintext highlighter-rouge">bear make</code> while compiling the code generates the compilation database (in <code class="language-plaintext highlighter-rouge">compile_commands.json</code>)</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="nb">cd </span>js/src/
<span class="nb">cp </span>configure.in configure <span class="o">&amp;&amp;</span> autoconf2.13
<span class="nb">mkdir </span>build_debug.OBJ
<span class="nb">cd </span>build_debug.OBJ
../configure <span class="nt">--enable-debug</span> <span class="nt">--enable-optimize</span> <span class="nt">--enable-ion</span>
bear make <span class="nt">-j4</span>
<span class="nb">cd </span>dist/bin/
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The generated compilation database should be placed in the root folder of the project, and the text editor should be started from this root folder. It takes some time (and a lot of CPU usage) for ccls to index the whole code, but once itâ€™s done it makes code navigation a whole lot easier.</p>

<p>I usually have one debug (in <code class="language-plaintext highlighter-rouge">build_debug.OBJ</code>) and one non-debug build (in <code class="language-plaintext highlighter-rouge">build_nondebug.OBJ</code>). I use the non-debug build while building and testing the exploit as sometimes assertions in the debug build break the exploit. For the non-debug build just use <code class="language-plaintext highlighter-rouge">../configure --disable-debug --enable-optimize --enable-ion</code>.</p>

<h1 id="debugging">Debugging</h1>

<p>For debugging, I use gdb with <a href="https://github.com/hugsy/gef">gef</a>. Also, this <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Hacking_Tips">nice article</a> on MDN docs about SpiderMonkey debugging tips is pretty useful.</p>

<p>While trying to set a breakpoint in JIT compiled code, using the method method mentioned in the MDN page, I got the message saying that the <code class="language-plaintext highlighter-rouge">masm.breakpoint</code> has been â€˜optimized outâ€™. I guess it got inlined by gcc. So what I did was to place breakpoint on a function that was going to be inlined.</p>

<p>For eg,</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="rouge-code"><pre><span class="nx">array</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>

<span class="kd">function</span> <span class="nx">test</span><span class="p">(){</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
  <span class="kd">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">array</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{}</span>  <span class="c1">// JIT compile this function</span>
  <span class="k">return</span> <span class="nx">value</span><span class="o">+</span><span class="mh">0x1234</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">test</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>While JIT compiling this and generating the code for calling <code class="language-plaintext highlighter-rouge">Array.pop</code>, <code class="language-plaintext highlighter-rouge">js::jit::CodeGenerator::visitArrayPopShiftT</code> function is called.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="rouge-code"><pre><span class="kt">void</span>
<span class="n">CodeGenerator</span><span class="o">::</span><span class="n">visitArrayPopShiftT</span><span class="p">(</span><span class="n">LArrayPopShiftT</span><span class="o">*</span> <span class="n">lir</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Register</span> <span class="n">obj</span> <span class="o">=</span> <span class="n">ToRegister</span><span class="p">(</span><span class="n">lir</span><span class="o">-&gt;</span><span class="n">object</span><span class="p">());</span>
    <span class="n">Register</span> <span class="n">elements</span> <span class="o">=</span> <span class="n">ToRegister</span><span class="p">(</span><span class="n">lir</span><span class="o">-&gt;</span><span class="n">temp0</span><span class="p">());</span>
    <span class="n">Register</span> <span class="n">length</span> <span class="o">=</span> <span class="n">ToRegister</span><span class="p">(</span><span class="n">lir</span><span class="o">-&gt;</span><span class="n">temp1</span><span class="p">());</span>
    <span class="n">TypedOrValueRegister</span> <span class="n">out</span><span class="p">(</span><span class="n">lir</span><span class="o">-&gt;</span><span class="n">mir</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">type</span><span class="p">(),</span> <span class="n">ToAnyRegister</span><span class="p">(</span><span class="n">lir</span><span class="o">-&gt;</span><span class="n">output</span><span class="p">()));</span>
    <span class="n">emitArrayPopShift</span><span class="p">(</span><span class="n">lir</span><span class="p">,</span> <span class="n">lir</span><span class="o">-&gt;</span><span class="n">mir</span><span class="p">(),</span> <span class="n">obj</span><span class="p">,</span> <span class="n">elements</span><span class="p">,</span> <span class="n">length</span><span class="p">,</span> <span class="n">out</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>This is calling <code class="language-plaintext highlighter-rouge">emitArrayPopShift</code></p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre><span class="kt">void</span>
<span class="n">CodeGenerator</span><span class="o">::</span><span class="n">emitArrayPopShift</span><span class="p">(</span><span class="n">LInstruction</span><span class="o">*</span> <span class="n">lir</span><span class="p">,</span> <span class="k">const</span> <span class="n">MArrayPopShift</span><span class="o">*</span> <span class="n">mir</span><span class="p">,</span> <span class="n">Register</span> <span class="n">obj</span><span class="p">,</span>
                                 <span class="n">Register</span> <span class="n">elementsTemp</span><span class="p">,</span> <span class="n">Register</span> <span class="n">lengthTemp</span><span class="p">,</span> <span class="n">TypedOrValueRegister</span> <span class="n">out</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">OutOfLineCode</span><span class="o">*</span> <span class="n">ool</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">mir</span><span class="o">-&gt;</span><span class="n">mode</span><span class="p">()</span> <span class="o">==</span> <span class="n">MArrayPopShift</span><span class="o">::</span><span class="n">Pop</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">ool</span> <span class="o">=</span> <span class="n">oolCallVM</span><span class="p">(</span><span class="n">ArrayPopDenseInfo</span><span class="p">,</span> <span class="n">lir</span><span class="p">,</span> <span class="n">ArgList</span><span class="p">(</span><span class="n">obj</span><span class="p">),</span> <span class="n">StoreValueTo</span><span class="p">(</span><span class="n">out</span><span class="p">));</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">MOZ_ASSERT</span><span class="p">(</span><span class="n">mir</span><span class="o">-&gt;</span><span class="n">mode</span><span class="p">()</span> <span class="o">==</span> <span class="n">MArrayPopShift</span><span class="o">::</span><span class="n">Shift</span><span class="p">);</span>
        <span class="n">ool</span> <span class="o">=</span> <span class="n">oolCallVM</span><span class="p">(</span><span class="n">ArrayShiftDenseInfo</span><span class="p">,</span> <span class="n">lir</span><span class="p">,</span> <span class="n">ArgList</span><span class="p">(</span><span class="n">obj</span><span class="p">),</span> <span class="n">StoreValueTo</span><span class="p">(</span><span class="n">out</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="o">:</span>
  <span class="o">:</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Now this is basically emiting code that calls a VM function <code class="language-plaintext highlighter-rouge">js::jit::ArrayPopDense</code>. Thus we can set a breakpoint here. and then hit <code class="language-plaintext highlighter-rouge">fin</code> in gdb to continue execution till the end of this function. Here is a backtrace when this breakpoint is hit</p>

<p><img src="/assets/img/workflow/backtrace.png" alt="" /></p>

<p>The code at address <code class="language-plaintext highlighter-rouge">0x3ff959cc1f1c</code> is the one generated by Ion. Thus we just hit <code class="language-plaintext highlighter-rouge">fin</code> and the control stops when it starts executing the Ion code and we can now step through Ion code.</p>

<p>Thus for stepping through Ion generated code, I usually put a call to some function (like Array.pop, slice, push etc) that calls a VM function in the Ion code.</p>

<p>Iâ€™ll keep updating this post whenever I come across new stuff related to code review/debugging as these act as notes for the future :)</p>
:ET